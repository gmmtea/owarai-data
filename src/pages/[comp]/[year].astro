---
import Base from "../../layouts/Base.astro";
import { listEditionParams, getEditionTable, getEditionJudges, getJudgeScoreTable } from "../../lib/queries";
import {
  orderColumns, labelFor, MULTILINE_KEYS, normalizeCellValue,
  isTitleKey, relatedMovieKeyForTitle, colClassFor
} from "../../lib/columns";

const base = import.meta.env.BASE_URL;

export async function getStaticPaths() {
  const params = listEditionParams();
  return params.map(({ comp, year }) => ({ params: { comp, year } }));
}

const { comp, year } = Astro.params as { comp: string; year: string };
const data = getEditionTable(comp, Number(year));
if (!data) throw new Error("該当データなし");
const { edition, rows, extraKeys } = data;
const labels: Record<string,string> = { m1:"M-1グランプリ", koc:"キングオブコント", r1:"R-1グランプリ" };

// ★ 並び順を統一
const cols = orderColumns(extraKeys);

const judges = getEditionJudges(comp, Number(year));
const round1 = getJudgeScoreTable(comp, Number(year), 1);
const round2 = getJudgeScoreTable(comp, Number(year), 2);
---
<Base title={`${edition.competition_name} ${edition.year} 決勝結果`}>
  <nav class="breadcrumbs">
    <a href={base}>トップ</a><span class="sep">/</span>
    <a href={`${base}${comp}`}>{labels[comp]}</a><span class="sep">/</span>
    <span>{edition.year}年</span>
  </nav>

  <h1>{edition.competition_name} {edition.year} 決勝結果</h1>
  <div class="table-wrap">
    <table>
      <thead>
        <tr>
          <th class="sticky-1 col-rank">順位</th>
          <th class="sticky-2 col-name">芸人</th>
          {cols.map(k => <th class={colClassFor(k)}>{labelFor(k)}</th>)}
        </tr>
      </thead>
      <tbody>
        {rows.map(r => (
          <tr>
            <td class="sticky-1 col-rank">
              <span class="badge" data-ranksort={r.rank_sort}>{r.rank}</span>
            </td>
            <td class="sticky-2 col-name"><a href={`${base}co/${r.comedian_id}`}>{r.name}</a></td>
            {cols.map((k) => {
              const text = normalizeCellValue(k, r[k]);
              const cls  = [colClassFor(k), MULTILINE_KEYS.has(k) ? "multiline" : ""].filter(Boolean).join(" ");
              if (isTitleKey(k)) {
                const movieKey = relatedMovieKeyForTitle(k);
                const url = movieKey ? normalizeCellValue(movieKey, r[movieKey]) : "";
                const isYouTube = !!url && /(?:^https?:\/\/)?(?:www\.)?(?:youtube\.com|youtu\.be)\//i.test(url);
                return (
                  <td class={cls}>
                    {text}
                    {url && " "}
                    {url && (
                      <a class={`video-link ${isYouTube ? "video-youtube" : ""}`}
                         href={url} target="_blank" rel="noopener noreferrer"
                         aria-label={isYouTube ? "YouTubeで見る" : "動画を見る"}>
                        <svg viewBox="0 0 24 24" aria-hidden="true" focusable="false">
                          <path fill="currentColor"
                            d="M23.5 6.2a4 4 0 0 0-2.8-2.8C18.5 3 12 3 12 3S5.5 3 3.3 3.4A4 4 0 0 0 .5 6.2 41 41 0 0 0 0 12c0 2 .2 3.8.5 5.8a4 4 0 0 0 2.8 2.8C5.5 21 12 21 12 21s6.5 0 8.7-.4a4 4 0 0 0 2.8-2.8c.3-2 .5-3.8.5-5.8s-.2-3.8-.5-5.8ZM9.75 15.02V8.98L15.5 12l-5.75 3.02Z"/>
                        </svg>
                      </a>
                    )}
                  </td>
                );
              }
              return <td class={cls}>{text}</td>;
            })}
          </tr>
        ))}
      </tbody>
    </table>
  </div>

  {round1 && round1.seats.length > 0 && (
    <>
      <h2>1本目 審査員別得点</h2>
      <div class="table-wrap">
        <table>
          <thead>
            <tr>
              <th>芸人</th>
              {round1.seats.map(s => <th class="col-score">{s.name}</th>)}
              <th class="col-total">合計</th>
            </tr>
          </thead>
          <tbody>
            {round1.rows.map(r => (
              <tr>
                <td><a href={`${base}co/${r.comedian_id}`}>{r.comedian_name}</a></td>
                {round1.seats.map(s => <td class="col-score">{r.bySeat[s.seat_no] ?? ""}</td>)}
                <td class="col-total">{r.total ?? ""}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </>
  )}

  {round2 && round2.seats.length > 0 && (
    <>
      <h2>2本目 審査員別得点</h2>
      <div class="table-wrap">
        <table>
          <thead>
            <tr>
              <th>芸人</th>
              {round2.seats.map(s => <th class="col-score">{s.name}</th>)}
              <th class="col-total">合計</th>
            </tr>
          </thead>
          <tbody>
            {round2.rows.map(r => (
              <tr>
                <td><a href={`${base}co/${r.comedian_id}`}>{r.comedian_name}</a></td>
                {round2.seats.map(s => <td class="col-score">{r.bySeat[s.seat_no] ?? ""}</td>)}
                <td class="col-total">{r.total ?? ""}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </>
  )}

  <p class="muted"><a href={`${base}${comp}`}>← {edition.competition_name} 年別一覧</a> / <a href={base}>トップ</a></p>
</Base>
