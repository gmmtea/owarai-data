---
import Base from "../../layouts/Base.astro";
import { listEditionParams, getCompetitionYearTables } from "../../lib/queries";
import {
  orderColumns, labelFor, MULTILINE_KEYS, normalizeCellValue,
  isTitleKey, relatedMovieKeyForTitle, colClassFor
} from "../../lib/columns";

const base = import.meta.env.BASE_URL;

export async function getStaticPaths() {
  // editionsに存在する大会キーだけに限定（空大会でビルドが落ちないように）
  const params = listEditionParams(); // [{comp, year}, ...]
  const comps = Array.from(new Set(params.map(p => p.comp)));
  return comps.map((comp) => ({ params: { comp } }));
}

const { comp } = Astro.params as { comp: string };
const list = getCompetitionYearTables(comp);
if (!list.length) throw new Error("該当データなし");
const compName = list[0].table.edition.competition_name;
---
<Base title={`${compName} 年別結果`}>
  <nav class="breadcrumbs">
    <a href={base}>トップ</a><span class="sep">/</span>
    <span>{compName}</span>
  </nav>

  <h1>{compName} 年別結果</h1>

  {list.map(({ year, table }) => {
    const cols = orderColumns(table.extraKeys);
    return (
      <section>
        <h2 class="kv">{year}年 <a class="muted" href={`${base}${comp}/${year}`}>（単独ページ）</a></h2>
        <div class="table-wrap">
          <table>
            <thead>
              <tr>
                <th class="sticky-1 col-name">芸人</th>
                <th class="sticky-2 col-rank">順位</th>
                {cols.map((k: string) => <th class={colClassFor(k)}>{labelFor(k)}</th>)}
              </tr>
            </thead>
            <tbody>
              {table.rows.map((r: any) => (
                <tr>
                  <td class="sticky-1 col-name"><a href={`${base}co/${r.comedian_id}`}>{r.name}</a></td>
                  <td class="sticky-2 col-rank"><span class="badge" data-ranksort={r.rank_sort}>{r.rank}</span></td>
                  {cols.map((k) => {
                    const text = normalizeCellValue(k, r[k]);
                    const cls  = [colClassFor(k), MULTILINE_KEYS.has(k) ? "multiline" : ""].filter(Boolean).join(" ");
                    if (isTitleKey(k)) {
                      const movieKey = relatedMovieKeyForTitle(k);
                      const url = movieKey ? normalizeCellValue(movieKey, r[movieKey]) : "";
                      const isYouTube = !!url && /(?:^https?:\/\/)?(?:www\.)?(?:youtube\.com|youtu\.be)\//i.test(url);
                      return (
                        <td class={cls}>
                          {text}
                          {url && " "}
                          {url && (
                            <a class={`video-link ${isYouTube ? "video-youtube" : ""}`}
                               href={url} target="_blank" rel="noopener noreferrer"
                               aria-label={isYouTube ? "YouTubeで見る" : "動画を見る"}>
                              <svg viewBox="0 0 24 24" aria-hidden="true" focusable="false">
                                <path fill="currentColor"
                                  d="M23.5 6.2a4 4 0 0 0-2.8-2.8C18.5 3 12 3 12 3S5.5 3 3.3 3.4A4 4 0 0 0 .5 6.2 41 41 0 0 0 0 12c0 2 .2 3.8.5 5.8a4 4 0 0 0 2.8 2.8C5.5 21 12 21 12 21s6.5 0 8.7-.4a4 4 0 0 0 2.8-2.8c.3-2 .5-3.8.5-5.8s-.2-3.8-.5-5.8ZM9.75 15.02V8.98L15.5 12l-5.75 3.02Z"/>
                              </svg>
                            </a>
                          )}
                        </td>
                      );
                    }
                    return <td class={cls}>{text}</td>;
                  })}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </section>
    );
  })}
</Base>
